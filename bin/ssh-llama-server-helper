#!/usr/bin/env python3

from dataclasses import dataclass
import argparse
import logging
import subprocess
import sys
import re
import shlex
import threading
import time
import requests
import os
import socket
import errno
import atexit
import pty
from typing import List, Optional, Tuple

@dataclass
class ProgramData:
    host: str
    system: str
    forwarded_port: str
    server_args: List[str]
    model: Optional[str] = None
    slot_save_path: Optional[str] = None
    process: Optional[subprocess.Popen] = None
    master: Optional[int] = None

SOCKET_PATH = os.path.expanduser("~/.ssh-llama-server-helper.socket")

def run_ssh_command(host: str, cmd: str, timeout: int = 10) -> subprocess.CompletedProcess:
    """Run an SSH command with logging"""
    logging.info(f"Running SSH command on {host}: {cmd}")
    return subprocess.run(['ssh', host, cmd],
                        capture_output=True,
                        text=True,
                        timeout=timeout)

def detect_system(host: str) -> str:
    """Detect if remote system is Windows or Unix-like"""
    try:
        result = run_ssh_command(host, 'echo %OS%')
        if 'Windows' in result.stdout:
            return 'windows'
    except Exception as e:
        logging.warning(f"Failed to detect system on {host}: {e}")
    return 'unix'


def extract_arg(args: List[str], flag: str) -> Optional[str]:
    """Extract argument value following specified flag

    Args:
        args: List of command line arguments
        flag: The flag to look for (e.g. '-m' or '--port')

    Returns:
        The extracted string value, or None if not found
    """
    for i, arg in enumerate(args):
        if arg == flag and i + 1 < len(args):
            return args[i + 1]
    return None

def check_running_process(host: str, system: str, model: Optional[str]) -> Optional[str]:
    """Check if llama-server is running with the specified model"""
    if system == 'windows':
        cmd = 'wmic process where "name like \'%llama-server.exe\'" get name,commandline /format:csv'
        try:
            result = run_ssh_command(host, cmd)
            if 'llama-server.exe' in result.stdout:
                if model and model in result.stdout:
                    port_match = re.search(r'--port\s+(\d+)', result.stdout)
                    return port_match.group(1) if port_match else None
        except:
            pass
    else:
        cmd = "pgrep -f 'llama-server$'"
        try:
            result = subprocess.run(['ssh', host, cmd],
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                ps_cmd = "ps aux | grep 'llama-server$' | grep -v grep"
                ps_result = run_ssh_command(host, ps_cmd)
                if model and model in ps_result.stdout:
                    port_match = re.search(r'--port\s+(\d+)', ps_result.stdout)
                    return port_match.group(1) if port_match else None
        except:
            pass
    return None

def kill_existing_process(host: str, system: str) -> None:
    """Kill existing llama-server process"""
    if system == 'windows':
        cmd = 'wmic process where "name like \'%llama-server.exe\'" delete'
    else:
        cmd = "pkill -f 'llama-server$'"

    try:
        run_ssh_command(host, cmd)
    except Exception as e:
        logging.warning(f"Failed to kill process on {host}: {e}")

def save_model_cache(program_data: ProgramData) -> str:
    """Save model cache to slot_save_path"""
    if not (program_data.slot_save_path and program_data.model):
        return "Error: No model or slot_save_path specified"

    model_basename = os.path.basename(program_data.model)
    cache_file = f"{model_basename}.bin"
    save_url = f"http://localhost:{program_data.forwarded_port}/slots/0?action=save"
    try:
        response = requests.post(save_url, json={"filename": cache_file})
        return response.text
    except Exception as e:
        return f'{{"error": "{str(e)}"}}'

def restore_model_cache(program_data: ProgramData) -> str:
    """Restore model cache from slot_save_path if available"""
    if not (program_data.slot_save_path and program_data.model):
        return "Error: No model or slot_save_path specified"

    model_basename = os.path.basename(program_data.model)
    cache_file = f"{model_basename}.bin"

    if program_data.system == 'windows':
        check_cmd = f"if exist \"{program_data.slot_save_path}/{cache_file}\" (echo exists)"
    else:
        check_cmd = f"test -f \"{program_data.slot_save_path}/{cache_file}\" && echo exists"

    try:
        result = run_ssh_command(program_data.host, check_cmd)
        if 'exists' in result.stdout:
            restore_url = f"http://localhost:{program_data.forwarded_port}/slots/0?action=restore"
            response = requests.post(restore_url, json={"filename": cache_file})
            return response.text
        return '{"error":"No cache file found"}'
    except Exception as e:
        return f'{{"error": "{str(e)}"}}'

def check_health(program_data: ProgramData) -> None:
    """Check server health and restore model if needed"""
    health_url = f"http://localhost:{program_data.forwarded_port}/health"

    while True:
        try:
            response = requests.get(health_url, timeout=5)
            if response.status_code == 200:
                break
        except:
            pass
        time.sleep(5)

    restore_model_cache(program_data)

def create_socket_listener(program_data: ProgramData) -> None:
    """Create a unix socket listener for stop commands"""
    try:
        os.unlink(SOCKET_PATH)
    except OSError:
        if os.path.exists(SOCKET_PATH):
            raise

    sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    sock.bind(SOCKET_PATH)
    sock.listen(1)

    while True:
        try:
            connection, _ = sock.accept()
            try:
                data = connection.recv(1024).decode().strip()
                if data == "stop":
                    logging.info("Socket received stop signal, terminating process")
                    if program_data.process:
                        program_data.process.terminate()
                        try:
                            program_data.process.wait(timeout=5)
                        except subprocess.TimeoutExpired:
                            program_data.process.kill()
                    break
                elif data == "get-host":
                    logging.info("Socket received get-host request")
                    connection.sendall(f"{program_data.host}\n".encode())
                elif data == "save":
                    logging.info("Socket received save cache request")
                    result = save_model_cache(program_data)
                    connection.sendall(f"{result}\n".encode())
                elif data == "load":
                    logging.info("Socket received load cache request")
                    result = restore_model_cache(program_data)
                    connection.sendall(f"{result}\n".encode())
                elif data == "reconnect":
                    logging.info("Socket received reconnect request")

                    # Restart the SSH tunnel
                    if program_data.process:
                        program_data.process.terminate()
                        try:
                            program_data.process.wait(timeout=5)
                        except subprocess.TimeoutExpired:
                            program_data.process.kill()
                    start_ssh_tunnel(program_data)

                    connection.sendall("ok\n".encode())
            finally:
                connection.close()
        except Exception as e:
            logging.error(f"Socket error: {e}")
            break

    sock.close()

def start_ssh_tunnel(program_data: ProgramData) -> None:
    """Start the SSH tunnel process"""
    running_port = check_running_process(program_data.host, program_data.system, program_data.model)
    
    if running_port:
        logging.info(f"Found existing server running on port {running_port}")
        ssh_cmd = ['ssh', '-tt', '-L', f'{program_data.forwarded_port}:127.0.0.1:{running_port}', program_data.host]

        logging.info(f"Starting SSH tunnel with PTY: {ssh_cmd}")

        # Use pty.spawn to properly handle terminal interaction
        master, slave = pty.openpty()
        program_data.master = master
        program_data.process = subprocess.Popen(ssh_cmd, stdin=slave, stdout=slave, stderr=slave)
    else:
        logging.info("No existing server found, starting new instance")
        kill_existing_process(program_data.host, program_data.system)
        ssh_cmd = ['ssh', '-L', f'{program_data.forwarded_port}:127.0.0.1:{program_data.forwarded_port}', 
                  program_data.host, *program_data.server_args]

        logging.info(f"Starting SSH tunnel with command: {ssh_cmd}")
        program_data.process = subprocess.Popen(ssh_cmd)

def wait_for_socket_cleanup(timeout: int = 10) -> None:
    """Wait for existing socket file to be removed"""
    start_time = time.time()
    while os.path.exists(SOCKET_PATH):
        if time.time() - start_time > timeout:
            logging.warning("Timeout waiting for socket cleanup, forcefully killing processes")
            subprocess.run(['fuser', '-k', SOCKET_PATH])
            os.unlink(SOCKET_PATH)
            return
        time.sleep(0.1)

def send_socket_command(command: str) -> Optional[str]:
    """Send command to running instance via socket

    Args:
        command: The command to send ('stop', 'get-host', 'save', or 'load')

    Returns:
        The response from socket if command was 'get-host', 'save' or 'load', else None
    """
    if not os.path.exists(SOCKET_PATH):
        return None

    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        sock.connect(SOCKET_PATH)
        sock.sendall(f"{command}\n".encode())

        # Read response line by line
        response = b''
        while True:
            chunk = sock.recv(1024)
            if not chunk:
                break
            response += chunk
            if b'\n' in chunk:  # Stop at first newline
                break
        response = response.decode().strip()
        sock.close()
        return response
    except socket.error as e:
        if e.errno != errno.ECONNREFUSED:
            raise
        return None

def cleanup_socket() -> None:
    """Cleanup socket file on exit"""
    try:
        if os.path.exists(SOCKET_PATH):
            os.unlink(SOCKET_PATH)
    except Exception as e:
        logging.error(f"Error cleaning up socket: {e}")

def cleanup_terminal(program_data: ProgramData) -> None:
    """Send exit command to terminal if using PTY"""
    try:
        if program_data.master is not None:
            os.write(program_data.master, b"exit\r\n")
            os.close(program_data.master)
    except Exception as e:
        logging.error(f"Error cleaning up terminal: {e}")

def main() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

    parser = argparse.ArgumentParser(description='SSH llama-server helper')
    parser.add_argument('--host', help='SSH host')
    parser.add_argument('-k', '--kill', action='store_true', help='Stop running server')
    parser.add_argument('--get-host', action='store_true', help='Get connected SSH host from running instance')
    parser.add_argument('--save', action='store_true', help='Save current model state')
    parser.add_argument('--load', action='store_true', help='Load saved model state')
    parser.add_argument('--reconnect', action='store_true', help='Reconnect to running server')
    # rest of the args (server_args) are parsed by parser.parse_known_args

    args, server_args = parser.parse_known_args()

    if args.kill:
        logging.info("Received kill command, sending stop signal")
        send_socket_command("stop")
        logging.info("Stop signal sent successfully")
        return

    if args.get_host:
        logging.info("Requesting host from running instance")
        host = send_socket_command("get-host")
        if host:
            print(host)
            return
        logging.error("No running instance found or failed to get host")
        sys.exit(1)

    if args.save:
        logging.info("Sending save command to running instance")
        response = send_socket_command("save")
        if response:
            print(response)
            return
        logging.error("No running instance found or failed to save")
        sys.exit(1)

    if args.load:
        logging.info("Sending load command to running instance")
        response = send_socket_command("load")
        if response:
            print(response)
            return
        logging.error("No running instance found or failed to load")
        sys.exit(1)

    if args.reconnect:
        logging.info("Sending reconnect command to running instance")
        response = send_socket_command("reconnect")
        if response:
            print("Reconnected successfully")
            return
        logging.error("No running instance found or failed to reconnect")
        sys.exit(1)

    assert args.host is not None
    host: str = args.host
    logging.info(f"Starting helper for host: {host}")

    # Check for existing socket and wait for cleanup
    if os.path.exists(SOCKET_PATH):
        logging.info("Existing socket found, checking if it's in use")
        # Check if any process is using the socket
        try:
            result = subprocess.run(['lsof', SOCKET_PATH], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0 and result.stdout.strip():
                logging.info("Socket is in use, sending stop signal")
                send_socket_command("stop")
            else:
                logging.info("Socket file exists but no process is using it, removing")
                os.unlink(SOCKET_PATH)
        except (subprocess.TimeoutExpired, FileNotFoundError):
            # lsof not available or timeout, just try to send stop signal
            logging.info("lsof not available or timeout, sending stop signal")
            send_socket_command("stop")
        except Exception as e:
            logging.warning(f"Error checking socket usage: {e}")
            send_socket_command("stop")
        
        wait_for_socket_cleanup()

    forwarded_port = extract_arg(server_args, '--port')
    if not forwarded_port:
        logging.error("No --port argument found in llama-server arguments")
        sys.exit(1)

    program_data = ProgramData(
        host=host,
        system=detect_system(host),
        forwarded_port=forwarded_port,
        model=extract_arg(server_args, '-m'),
        slot_save_path=extract_arg(server_args, '--slot-save-path'),
        server_args=server_args
    )

    logging.info(f"Forwarding port: {program_data.forwarded_port}")
    logging.info(f"Detected system type: {program_data.system}")

    running_port: Optional[str] = check_running_process(program_data.host, program_data.system, program_data.model)

    # Register cleanup functions here so that simple commands dont delete the socket
    atexit.register(cleanup_socket)
    atexit.register(cleanup_terminal, program_data)

    start_ssh_tunnel(program_data)
    create_socket_listener(program_data)

    if program_data.model and program_data.slot_save_path:
        health_thread = threading.Thread(
            target=check_health,
            args=(program_data,),
            daemon=True
        )
        health_thread.start()

    socket_thread = threading.Thread(
        target=create_socket_listener,
        args=(program_data,),
        daemon=True
    )
    socket_thread.start()

    try:
        logging.info("Waiting for SSH tunnel process to complete")
        program_data.process.wait()
        logging.info("SSH tunnel process completed")
    except KeyboardInterrupt:
        logging.info("Received keyboard interrupt, terminating process")
        if program_data.process:
            program_data.process.terminate()
            try:
                program_data.process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                program_data.process.kill()
    finally:
        logging.info("Cleaning up")
        send_socket_command("stop")
        cleanup_terminal(program_data)

if __name__ == '__main__':
    main()
